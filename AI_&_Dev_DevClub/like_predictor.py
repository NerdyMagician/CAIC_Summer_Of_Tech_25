# -*- coding: utf-8 -*-
"""like_predictor.pkl

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VfLHsthnUosCn8avMepCOOcQE9D3BDYl
"""

import pandas as pd
from google.colab import files
sheet_id = "1JcESl7qCCBvS6xpWMZplhCXunvmkcNU_"
gid = "95254209"
from flask_ngrok import run_with_ngrok
url = f"https://docs.google.com/spreadsheets/d/{sheet_id}/export?format=csv&gid={gid}"

df = pd.read_csv(url)
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import LabelEncoder
import joblib
from flask import Flask, request, jsonify
import joblib
import numpy as np

app = Flask(__name__)
run_with_ngrok(app)
model = joblib.load()

df['media'].fillna('no_media', inplace=True)
df['has_media'] = df['media'].apply(lambda x: x != 'no_media')
df['content'] = df['content'].astype(str).str.strip().str.lower()
df['datetime'] = pd.to_datetime(df['date'], errors='coerce')
df['word_count'] = df['content'].apply(lambda p: len(p.split()))
df['char_count'] = df['content'].apply(lambda p: len(p))
df['hour'] = df['datetime'].dt.hour
df['day_of_week'] = df['datetime'].dt.day_name()
from textblob import TextBlob

df['sentiment'] = df['content'].apply(lambda x: TextBlob(x).sentiment.polarity)
le = LabelEncoder()
df['company_encoded'] = le.fit_transform(df['inferred company'])
df.dropna(subset=['content', 'username', 'inferred company', 'likes'], inplace=True)


X = df[['word_count', 'char_count', 'has_media', 'hour', 'sentiment']]
y = df['likes']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = RandomForestRegressor()
model.fit(X_train, y_train)

preds = model.predict(X_test)
rmse = mean_squared_error(y_test, preds)
print("RMSE:", rmse**(0.5))
@app.route('/predict', methods=['POST'])
def predict():
    data = request.get_json()
    features = np.array([
        data['word_count'],
        data['char_count'],
        data['has_media'],
        data['hour'],
        data['sentiment']
    ]).reshape(1, -1)

    prediction = model.predict(features)[0]
    return (jsonify({'predicted_likes': int(prediction)}))


if __name__ == '__main__':
    app.run()

joblib.dump(model, 'like_predictor')

!pip install flask-ngrok

!pip install textblob